{
  "format_version": "0.2",
  "terraform_version": "1.0.3",
  ".__": {
    "root_module": {
      "child_modules": [
        {
          "resources": [
            {
              "address": "module.bonek-mania.aws_iam_user.this[0]",
              "mode": "managed",
              "type": "aws_iam_user",
              "name": "this",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "force_destroy": true,
                "name": "bonek-mania",
                "path": "/",
                "permissions_boundary": "",
                "tags": {
                  "BastionUserName": "bonek-mania",
                  "Email": "bonek-mania@mania.com",
                  "Organization": "bonek",
                  "Project": "bonek",
                  "Terraform": "true"
                },
                "tags_all": {
                  "BastionUserName": "bonek-mania",
                  "Email": "bonek-mania@mania.com",
                  "Organization": "bonek",
                  "Project": "bonek",
                  "Terraform": "true"
                }
              },
              "sensitive_values": { "tags": {}, "tags_all": {} }
            },
            {
              "address": "module.bonek-mania.aws_iam_user_login_profile.this[0]",
              "mode": "managed",
              "type": "aws_iam_user_login_profile",
              "name": "this",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "password_length": 20,
                "password_reset_required": true,
                "pgp_key": "keybase:whitespace01",
                "user": "bonek-mania"
              },
              "sensitive_values": {}
            }
          ],
          "address": "module.bonek-mania"
        },
        {
          "resources": [
            {
              "address": "module.group_policy_ec2_all_role.aws_iam_group.this[0]",
              "mode": "managed",
              "type": "aws_iam_group",
              "name": "this",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": { "name": "group-policy-ec2-all-role", "path": "/" },
              "sensitive_values": {}
            },
            {
              "address": "module.group_policy_ec2_all_role.aws_iam_group_membership.this[0]",
              "mode": "managed",
              "type": "aws_iam_group_membership",
              "name": "this",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "name": "group-policy-ec2-all-role",
                "users": ["bonek-mania"]
              },
              "sensitive_values": { "users": [false] }
            },
            {
              "address": "module.group_policy_ec2_all_role.aws_iam_group_policy_attachment.custom_arns[0]",
              "mode": "managed",
              "type": "aws_iam_group_policy_attachment",
              "name": "custom_arns",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "policy_arn": "arn:aws:iam::783095911817:policy/policy-ec2-all-role"
              },
              "sensitive_values": {}
            }
          ],
          "address": "module.group_policy_ec2_all_role"
        },
        {
          "resources": [
            {
              "address": "module.policy_ec2_all_role.aws_iam_policy.policy",
              "mode": "managed",
              "type": "aws_iam_policy",
              "name": "policy",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "description": "Allow user to get all access to EC2 resource",
                "name": "policy-ec2-all-role",
                "name_prefix": null,
                "path": "/",
                "policy": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:*\"\n            ],\n            \"Resource\": \"arn:aws:ec2:*\"\n        }\n    ]\n}\n",
                "tags": null
              },
              "sensitive_values": { "tags_all": {} }
            }
          ],
          "address": "module.policy_ec2_all_role"
        }
      ]
    }
  },
  "resource_changes": [
    {
      "address": "module.bonek-mania.aws_iam_user.this[0]",
      "module_address": "module.bonek-mania",
      "mode": "managed",
      "type": "aws_iam_user",
      "name": "this",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "force_destroy": true,
          "name": "bonek-mania",
          "path": "/",
          "permissions_boundary": "",
          "tags": {
            "BastionUserName": "bonek-mania",
            "Email": "bonek-mania@mania.com",
            "Organization": "bonek",
            "Project": "bonek",
            "Terraform": "true"
          },
          "tags_all": {
            "BastionUserName": "bonek-mania",
            "Email": "bonek-mania@mania.com",
            "Organization": "bonek",
            "Project": "bonek",
            "Terraform": "true"
          }
        },
        "after_unknown": {
          "arn": true,
          "id": true,
          "tags": {},
          "tags_all": {},
          "unique_id": true
        },
        "before_sensitive": false,
        "after_sensitive": { "tags": {}, "tags_all": {} }
      }
    },
    {
      "address": "module.bonek-mania.aws_iam_user_login_profile.this[0]",
      "module_address": "module.bonek-mania",
      "mode": "managed",
      "type": "aws_iam_user_login_profile",
      "name": "this",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "password_length": 20,
          "password_reset_required": true,
          "pgp_key": "keybase:whitespace01",
          "user": "bonek-mania"
        },
        "after_unknown": {
          "encrypted_password": true,
          "id": true,
          "key_fingerprint": true
        },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.group_policy_ec2_all_role.aws_iam_group.this[0]",
      "module_address": "module.group_policy_ec2_all_role",
      "mode": "managed",
      "type": "aws_iam_group",
      "name": "this",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": { "name": "group-policy-ec2-all-role", "path": "/" },
        "after_unknown": { "arn": true, "id": true, "unique_id": true },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.group_policy_ec2_all_role.aws_iam_group_membership.this[0]",
      "module_address": "module.group_policy_ec2_all_role",
      "mode": "managed",
      "type": "aws_iam_group_membership",
      "name": "this",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "name": "group-policy-ec2-all-role",
          "users": ["bonek-mania"]
        },
        "after_unknown": { "group": true, "id": true, "users": [false] },
        "before_sensitive": false,
        "after_sensitive": { "users": [false] }
      }
    },
    {
      "address": "module.group_policy_ec2_all_role.aws_iam_group_policy_attachment.custom_arns[0]",
      "module_address": "module.group_policy_ec2_all_role",
      "mode": "managed",
      "type": "aws_iam_group_policy_attachment",
      "name": "custom_arns",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "policy_arn": "arn:aws:iam::783095911817:policy/policy-ec2-all-role"
        },
        "after_unknown": { "group": true, "id": true },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.policy_ec2_all_role.aws_iam_policy.policy",
      "module_address": "module.policy_ec2_all_role",
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "policy",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "description": "Allow user to get all access to EC2 resource",
          "name": "policy-ec2-all-role",
          "name_prefix": null,
          "path": "/",
          "policy": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:*\"\n            ],\n            \"Resource\": \"arn:aws:ec2:*\"\n        }\n    ]\n}\n",
          "tags": null
        },
        "after_unknown": {
          "arn": true,
          "id": true,
          "policy_id": true,
          "tags_all": true
        },
        "before_sensitive": false,
        "after_sensitive": { "tags_all": {} }
      }
    }
  ],
  "prior_state": {
    "format_version": "0.2",
    "terraform_version": "1.0.3",
    "values": {
      "root_module": {
        "child_modules": [
          {
            "resources": [
              {
                "address": "module.group_policy_ec2_all_role.data.aws_caller_identity.current[0]",
                "mode": "data",
                "type": "aws_caller_identity",
                "name": "current",
                "index": 0,
                "provider_name": "registry.terraform.io/hashicorp/aws",
                "schema_version": 0,
                "values": {
                  "account_id": "783095911817",
                  "arn": "arn:aws:iam::783095911817:user/aws-test",
                  "id": "783095911817",
                  "user_id": "AIDA3MVBHKWE5QZLO7M64"
                },
                "sensitive_values": {}
              },
              {
                "address": "module.group_policy_ec2_all_role.data.aws_iam_policy_document.iam_self_management",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "iam_self_management",
                "provider_name": "registry.terraform.io/hashicorp/aws",
                "schema_version": 0,
                "values": {
                  "id": "1881272304",
                  "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"AllowSelfManagement\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:UploadSigningCertificate\",\n        \"iam:UploadSSHPublicKey\",\n        \"iam:UpdateUser\",\n        \"iam:UpdateLoginProfile\",\n        \"iam:UpdateAccessKey\",\n        \"iam:ResyncMFADevice\",\n        \"iam:List*\",\n        \"iam:Get*\",\n        \"iam:GenerateServiceLastAccessedDetails\",\n        \"iam:GenerateCredentialReport\",\n        \"iam:EnableMFADevice\",\n        \"iam:DeleteVirtualMFADevice\",\n        \"iam:DeleteLoginProfile\",\n        \"iam:DeleteAccessKey\",\n        \"iam:CreateVirtualMFADevice\",\n        \"iam:CreateLoginProfile\",\n        \"iam:CreateAccessKey\",\n        \"iam:ChangePassword\"\n      ],\n      \"Resource\": [\n        \"arn:aws:iam::783095911817:user/*/${aws:username}\",\n        \"arn:aws:iam::783095911817:user/${aws:username}\",\n        \"arn:aws:iam::783095911817:mfa/${aws:username}\"\n      ]\n    },\n    {\n      \"Sid\": \"AllowIAMReadOnly\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:List*\",\n        \"iam:Get*\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"AllowDeactivateMFADevice\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"iam:DeactivateMFADevice\",\n      \"Resource\": [\n        \"arn:aws:iam::783095911817:user/*/${aws:username}\",\n        \"arn:aws:iam::783095911817:user/${aws:username}\",\n        \"arn:aws:iam::783095911817:mfa/${aws:username}\"\n      ],\n      \"Condition\": {\n        \"Bool\": {\n          \"aws:MultiFactorAuthPresent\": [\n            \"true\"\n          ]\n        },\n        \"NumericLessThan\": {\n          \"aws:MultiFactorAuthAge\": [\n            \"3600\"\n          ]\n        }\n      }\n    }\n  ]\n}",
                  "override_json": null,
                  "override_policy_documents": null,
                  "policy_id": null,
                  "source_json": null,
                  "source_policy_documents": null,
                  "statement": [
                    {
                      "actions": [
                        "iam:ChangePassword",
                        "iam:CreateAccessKey",
                        "iam:CreateLoginProfile",
                        "iam:CreateVirtualMFADevice",
                        "iam:DeleteAccessKey",
                        "iam:DeleteLoginProfile",
                        "iam:DeleteVirtualMFADevice",
                        "iam:EnableMFADevice",
                        "iam:GenerateCredentialReport",
                        "iam:GenerateServiceLastAccessedDetails",
                        "iam:Get*",
                        "iam:List*",
                        "iam:ResyncMFADevice",
                        "iam:UpdateAccessKey",
                        "iam:UpdateLoginProfile",
                        "iam:UpdateUser",
                        "iam:UploadSSHPublicKey",
                        "iam:UploadSigningCertificate"
                      ],
                      "condition": [],
                      "effect": "Allow",
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [],
                      "resources": [
                        "arn:aws:iam::783095911817:mfa/${aws:username}",
                        "arn:aws:iam::783095911817:user/${aws:username}",
                        "arn:aws:iam::783095911817:user/*/${aws:username}"
                      ],
                      "sid": "AllowSelfManagement"
                    },
                    {
                      "actions": ["iam:Get*", "iam:List*"],
                      "condition": [],
                      "effect": "Allow",
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [],
                      "resources": ["*"],
                      "sid": "AllowIAMReadOnly"
                    },
                    {
                      "actions": ["iam:DeactivateMFADevice"],
                      "condition": [
                        {
                          "test": "Bool",
                          "values": ["true"],
                          "variable": "aws:MultiFactorAuthPresent"
                        },
                        {
                          "test": "NumericLessThan",
                          "values": ["3600"],
                          "variable": "aws:MultiFactorAuthAge"
                        }
                      ],
                      "effect": "Allow",
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [],
                      "resources": [
                        "arn:aws:iam::783095911817:mfa/${aws:username}",
                        "arn:aws:iam::783095911817:user/${aws:username}",
                        "arn:aws:iam::783095911817:user/*/${aws:username}"
                      ],
                      "sid": "AllowDeactivateMFADevice"
                    }
                  ],
                  "version": "2012-10-17"
                },
                "sensitive_values": {
                  "statement": [
                    {
                      "actions": [
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        false
                      ],
                      "condition": [],
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [],
                      "resources": [false, false, false]
                    },
                    {
                      "actions": [false, false],
                      "condition": [],
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [],
                      "resources": [false]
                    },
                    {
                      "actions": [false],
                      "condition": [
                        { "values": [false] },
                        { "values": [false] }
                      ],
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [],
                      "resources": [false, false, false]
                    }
                  ]
                }
              },
              {
                "address": "module.group_policy_ec2_all_role.data.aws_partition.current",
                "mode": "data",
                "type": "aws_partition",
                "name": "current",
                "provider_name": "registry.terraform.io/hashicorp/aws",
                "schema_version": 0,
                "values": {
                  "dns_suffix": "amazonaws.com",
                  "id": "aws",
                  "partition": "aws",
                  "reverse_dns_prefix": "com.amazonaws"
                },
                "sensitive_values": {}
              }
            ],
            "address": "module.group_policy_ec2_all_role"
          }
        ]
      }
    }
  },
  "configuration": {
    "provider_config": {
      "aws": {
        "name": "aws",
        "expressions": { "region": { "constant_value": "ap-southeast-1" } }
      },
      "module.bonek-mania:aws": {
        "name": "aws",
        "version_constraint": "\u003e= 2.50.0",
        "module_address": "module.bonek-mania"
      },
      "module.group_policy_ec2_all_role:aws": {
        "name": "aws",
        "version_constraint": "\u003e= 2.23.0",
        "module_address": "module.group_policy_ec2_all_role"
      },
      "module.policy_ec2_all_role:aws": {
        "name": "aws",
        "version_constraint": "\u003e= 2.23.0",
        "module_address": "module.policy_ec2_all_role"
      }
    },
    "root_module": {
      "module_calls": {
        "bonek-mania": {
          "source": "terraform-aws-modules/iam/aws//modules/iam-user",
          "expressions": {
            "create_iam_access_key": { "constant_value": false },
            "force_destroy": { "constant_value": "true" },
            "name": { "constant_value": "bonek-mania" },
            "password_reset_required": { "constant_value": true },
            "pgp_key": { "constant_value": "keybase:whitespace01" },
            "tags": {
              "constant_value": {
                "BastionUserName": "bonek-mania",
                "Email": "bonek-mania@mania.com",
                "Organization": "bonek",
                "Project": "bonek",
                "Terraform": "true"
              }
            }
          },
          "module": {
            "outputs": {
              "keybase_password_decrypt_command": {
                "expression": {
                  "references": [
                    "local.has_encrypted_password",
                    "aws_iam_user_login_profile.this"
                  ]
                },
                "description": "Decrypt user password command"
              },
              "keybase_password_pgp_message": {
                "expression": {
                  "references": [
                    "local.has_encrypted_password",
                    "aws_iam_user_login_profile.this"
                  ]
                },
                "description": "Encrypted password"
              },
              "keybase_secret_key_decrypt_command": {
                "expression": {
                  "references": [
                    "local.has_encrypted_secret",
                    "aws_iam_access_key.this"
                  ]
                },
                "description": "Decrypt access secret key command"
              },
              "keybase_secret_key_pgp_message": {
                "expression": {
                  "references": [
                    "local.has_encrypted_secret",
                    "aws_iam_access_key.this"
                  ]
                },
                "description": "Encrypted access secret key"
              },
              "pgp_key": {
                "expression": { "references": ["var.pgp_key"] },
                "description": "PGP key used to encrypt sensitive data for this user (if empty - secrets are not encrypted)"
              },
              "this_iam_access_key_encrypted_secret": {
                "expression": { "references": ["aws_iam_access_key.this"] },
                "description": "The encrypted secret, base64 encoded"
              },
              "this_iam_access_key_id": {
                "expression": {
                  "references": [
                    "aws_iam_access_key.this",
                    "aws_iam_access_key.this_no_pgp"
                  ]
                },
                "description": "The access key ID"
              },
              "this_iam_access_key_key_fingerprint": {
                "expression": { "references": ["aws_iam_access_key.this"] },
                "description": "The fingerprint of the PGP key used to encrypt the secret"
              },
              "this_iam_access_key_secret": {
                "sensitive": true,
                "expression": {
                  "references": ["aws_iam_access_key.this_no_pgp"]
                },
                "description": "The access key secret"
              },
              "this_iam_access_key_ses_smtp_password_v4": {
                "sensitive": true,
                "expression": {
                  "references": [
                    "aws_iam_access_key.this",
                    "aws_iam_access_key.this_no_pgp"
                  ]
                },
                "description": "The secret access key converted into an SES SMTP password by applying AWS's Sigv4 conversion algorithm"
              },
              "this_iam_access_key_status": {
                "expression": {
                  "references": [
                    "aws_iam_access_key.this",
                    "aws_iam_access_key.this_no_pgp"
                  ]
                },
                "description": "Active or Inactive. Keys are initially active, but can be made inactive by other means."
              },
              "this_iam_user_arn": {
                "expression": { "references": ["aws_iam_user.this"] },
                "description": "The ARN assigned by AWS for this user"
              },
              "this_iam_user_login_profile_encrypted_password": {
                "expression": {
                  "references": ["aws_iam_user_login_profile.this"]
                },
                "description": "The encrypted password, base64 encoded"
              },
              "this_iam_user_login_profile_key_fingerprint": {
                "expression": {
                  "references": ["aws_iam_user_login_profile.this"]
                },
                "description": "The fingerprint of the PGP key used to encrypt the password"
              },
              "this_iam_user_name": {
                "expression": { "references": ["aws_iam_user.this"] },
                "description": "The user's name"
              },
              "this_iam_user_ssh_key_fingerprint": {
                "expression": { "references": ["aws_iam_user_ssh_key.this"] },
                "description": "The MD5 message digest of the SSH public key"
              },
              "this_iam_user_ssh_key_ssh_public_key_id": {
                "expression": { "references": ["aws_iam_user_ssh_key.this"] },
                "description": "The unique identifier for the SSH public key"
              },
              "this_iam_user_unique_id": {
                "expression": { "references": ["aws_iam_user.this"] },
                "description": "The unique ID assigned by AWS"
              }
            },
            "resources": [
              {
                "address": "aws_iam_access_key.this",
                "mode": "managed",
                "type": "aws_iam_access_key",
                "name": "this",
                "provider_config_key": "bonek-mania:aws",
                "expressions": {
                  "pgp_key": { "references": ["var.pgp_key"] },
                  "user": {
                    "references": [
                      "aws_iam_user.this[0].name",
                      "aws_iam_user.this[0]",
                      "aws_iam_user.this"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_user",
                    "var.create_iam_access_key",
                    "var.pgp_key"
                  ]
                }
              },
              {
                "address": "aws_iam_access_key.this_no_pgp",
                "mode": "managed",
                "type": "aws_iam_access_key",
                "name": "this_no_pgp",
                "provider_config_key": "bonek-mania:aws",
                "expressions": {
                  "user": {
                    "references": [
                      "aws_iam_user.this[0].name",
                      "aws_iam_user.this[0]",
                      "aws_iam_user.this"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_user",
                    "var.create_iam_access_key",
                    "var.pgp_key"
                  ]
                }
              },
              {
                "address": "aws_iam_user.this",
                "mode": "managed",
                "type": "aws_iam_user",
                "name": "this",
                "provider_config_key": "bonek-mania:aws",
                "expressions": {
                  "force_destroy": { "references": ["var.force_destroy"] },
                  "name": { "references": ["var.name"] },
                  "path": { "references": ["var.path"] },
                  "permissions_boundary": {
                    "references": ["var.permissions_boundary"]
                  },
                  "tags": { "references": ["var.tags"] }
                },
                "schema_version": 0,
                "count_expression": { "references": ["var.create_user"] }
              },
              {
                "address": "aws_iam_user_login_profile.this",
                "mode": "managed",
                "type": "aws_iam_user_login_profile",
                "name": "this",
                "provider_config_key": "bonek-mania:aws",
                "expressions": {
                  "password_length": { "references": ["var.password_length"] },
                  "password_reset_required": {
                    "references": ["var.password_reset_required"]
                  },
                  "pgp_key": { "references": ["var.pgp_key"] },
                  "user": {
                    "references": [
                      "aws_iam_user.this[0].name",
                      "aws_iam_user.this[0]",
                      "aws_iam_user.this"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_user",
                    "var.create_iam_user_login_profile"
                  ]
                }
              },
              {
                "address": "aws_iam_user_ssh_key.this",
                "mode": "managed",
                "type": "aws_iam_user_ssh_key",
                "name": "this",
                "provider_config_key": "bonek-mania:aws",
                "expressions": {
                  "encoding": { "references": ["var.ssh_key_encoding"] },
                  "public_key": { "references": ["var.ssh_public_key"] },
                  "username": {
                    "references": [
                      "aws_iam_user.this[0].name",
                      "aws_iam_user.this[0]",
                      "aws_iam_user.this"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_user",
                    "var.upload_iam_user_ssh_key"
                  ]
                }
              }
            ],
            "variables": {
              "create_iam_access_key": {
                "default": true,
                "description": "Whether to create IAM access key"
              },
              "create_iam_user_login_profile": {
                "default": true,
                "description": "Whether to create IAM user login profile"
              },
              "create_user": {
                "default": true,
                "description": "Whether to create the IAM user"
              },
              "force_destroy": {
                "default": false,
                "description": "When destroying this user, destroy even if it has non-Terraform-managed IAM access keys, login profile or MFA devices. Without force_destroy a user with non-Terraform-managed access keys and login profile will fail to be destroyed."
              },
              "name": { "description": "Desired name for the IAM user" },
              "password_length": {
                "default": 20,
                "description": "The length of the generated password"
              },
              "password_reset_required": {
                "default": true,
                "description": "Whether the user should be forced to reset the generated password on first login."
              },
              "path": {
                "default": "/",
                "description": "Desired path for the IAM user"
              },
              "permissions_boundary": {
                "default": "",
                "description": "The ARN of the policy that is used to set the permissions boundary for the user."
              },
              "pgp_key": {
                "default": "",
                "description": "Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:username`. Used to encrypt password and access key. `pgp_key` is required when `create_iam_user_login_profile` is set to `true`"
              },
              "ssh_key_encoding": {
                "default": "SSH",
                "description": "Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use SSH. To retrieve the public key in PEM format, use PEM"
              },
              "ssh_public_key": {
                "default": "",
                "description": "The SSH public key. The public key must be encoded in ssh-rsa format or PEM format"
              },
              "tags": {
                "default": {},
                "description": "A map of tags to add to all resources."
              },
              "upload_iam_user_ssh_key": {
                "default": false,
                "description": "Whether to upload a public ssh key to the IAM user"
              }
            }
          },
          "version_constraint": "~\u003e 3.0"
        },
        "group_policy_ec2_all_role": {
          "source": "terraform-aws-modules/iam/aws//modules/iam-group-with-policies",
          "expressions": {
            "attach_iam_self_management_policy": { "constant_value": false },
            "custom_group_policy_arns": {
              "constant_value": [
                "arn:aws:iam::783095911817:policy/policy-ec2-all-role"
              ]
            },
            "group_users": { "constant_value": ["bonek-mania"] },
            "name": { "constant_value": "group-policy-ec2-all-role" }
          },
          "module": {
            "outputs": {
              "aws_account_id": {
                "expression": { "references": ["local.aws_account_id"] },
                "description": "IAM AWS account id"
              },
              "this_group_name": {
                "expression": {
                  "references": ["aws_iam_group.this", "var.name"]
                },
                "description": "IAM group name"
              },
              "this_group_users": {
                "expression": {
                  "references": ["aws_iam_group_membership.this"]
                },
                "description": "List of IAM users in IAM group"
              }
            },
            "resources": [
              {
                "address": "aws_iam_group.this",
                "mode": "managed",
                "type": "aws_iam_group",
                "name": "this",
                "provider_config_key": "group_policy_ec2_all_role:aws",
                "expressions": { "name": { "references": ["var.name"] } },
                "schema_version": 0,
                "count_expression": { "references": ["var.create_group"] }
              },
              {
                "address": "aws_iam_group_membership.this",
                "mode": "managed",
                "type": "aws_iam_group_membership",
                "name": "this",
                "provider_config_key": "group_policy_ec2_all_role:aws",
                "expressions": {
                  "group": { "references": ["local.group_name"] },
                  "name": { "references": ["var.name"] },
                  "users": { "references": ["var.group_users"] }
                },
                "schema_version": 0,
                "count_expression": { "references": ["var.group_users"] }
              },
              {
                "address": "aws_iam_group_policy_attachment.custom",
                "mode": "managed",
                "type": "aws_iam_group_policy_attachment",
                "name": "custom",
                "provider_config_key": "group_policy_ec2_all_role:aws",
                "expressions": {
                  "group": { "references": ["local.group_name"] },
                  "policy_arn": {
                    "references": ["aws_iam_policy.custom", "count.index"]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["var.custom_group_policies"]
                }
              },
              {
                "address": "aws_iam_group_policy_attachment.custom_arns",
                "mode": "managed",
                "type": "aws_iam_group_policy_attachment",
                "name": "custom_arns",
                "provider_config_key": "group_policy_ec2_all_role:aws",
                "expressions": {
                  "group": { "references": ["local.group_name"] },
                  "policy_arn": {
                    "references": [
                      "var.custom_group_policy_arns",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["var.custom_group_policy_arns"]
                }
              },
              {
                "address": "aws_iam_group_policy_attachment.iam_self_management",
                "mode": "managed",
                "type": "aws_iam_group_policy_attachment",
                "name": "iam_self_management",
                "provider_config_key": "group_policy_ec2_all_role:aws",
                "expressions": {
                  "group": { "references": ["local.group_name"] },
                  "policy_arn": {
                    "references": [
                      "aws_iam_policy.iam_self_management[0].arn",
                      "aws_iam_policy.iam_self_management[0]",
                      "aws_iam_policy.iam_self_management"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["var.attach_iam_self_management_policy"]
                }
              },
              {
                "address": "aws_iam_policy.custom",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "custom",
                "provider_config_key": "group_policy_ec2_all_role:aws",
                "expressions": {
                  "description": {
                    "references": ["var.custom_group_policies", "count.index"]
                  },
                  "name": {
                    "references": ["var.custom_group_policies", "count.index"]
                  },
                  "policy": {
                    "references": ["var.custom_group_policies", "count.index"]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["var.custom_group_policies"]
                }
              },
              {
                "address": "aws_iam_policy.iam_self_management",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "iam_self_management",
                "provider_config_key": "group_policy_ec2_all_role:aws",
                "expressions": {
                  "name_prefix": {
                    "references": ["var.iam_self_management_policy_name_prefix"]
                  },
                  "policy": {
                    "references": [
                      "data.aws_iam_policy_document.iam_self_management.json",
                      "data.aws_iam_policy_document.iam_self_management"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["var.attach_iam_self_management_policy"]
                }
              },
              {
                "address": "data.aws_caller_identity.current",
                "mode": "data",
                "type": "aws_caller_identity",
                "name": "current",
                "provider_config_key": "group_policy_ec2_all_role:aws",
                "schema_version": 0,
                "count_expression": { "references": ["var.aws_account_id"] }
              },
              {
                "address": "data.aws_iam_policy_document.iam_self_management",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "iam_self_management",
                "provider_config_key": "group_policy_ec2_all_role:aws",
                "expressions": {
                  "statement": [
                    {
                      "actions": {
                        "constant_value": [
                          "iam:ChangePassword",
                          "iam:CreateAccessKey",
                          "iam:CreateLoginProfile",
                          "iam:CreateVirtualMFADevice",
                          "iam:DeleteAccessKey",
                          "iam:DeleteLoginProfile",
                          "iam:DeleteVirtualMFADevice",
                          "iam:EnableMFADevice",
                          "iam:GenerateCredentialReport",
                          "iam:GenerateServiceLastAccessedDetails",
                          "iam:Get*",
                          "iam:List*",
                          "iam:ResyncMFADevice",
                          "iam:UpdateAccessKey",
                          "iam:UpdateLoginProfile",
                          "iam:UpdateUser",
                          "iam:UploadSigningCertificate",
                          "iam:UploadSSHPublicKey"
                        ]
                      },
                      "effect": { "constant_value": "Allow" },
                      "resources": {
                        "references": [
                          "data.aws_partition.current.partition",
                          "data.aws_partition.current",
                          "local.aws_account_id",
                          "data.aws_partition.current.partition",
                          "data.aws_partition.current",
                          "local.aws_account_id",
                          "data.aws_partition.current.partition",
                          "data.aws_partition.current",
                          "local.aws_account_id"
                        ]
                      },
                      "sid": { "constant_value": "AllowSelfManagement" }
                    },
                    {
                      "actions": {
                        "constant_value": ["iam:Get*", "iam:List*"]
                      },
                      "effect": { "constant_value": "Allow" },
                      "resources": { "constant_value": ["*"] },
                      "sid": { "constant_value": "AllowIAMReadOnly" }
                    },
                    {
                      "actions": {
                        "constant_value": ["iam:DeactivateMFADevice"]
                      },
                      "condition": [
                        {
                          "test": { "constant_value": "Bool" },
                          "values": { "constant_value": ["true"] },
                          "variable": {
                            "constant_value": "aws:MultiFactorAuthPresent"
                          }
                        },
                        {
                          "test": { "constant_value": "NumericLessThan" },
                          "values": { "constant_value": ["3600"] },
                          "variable": {
                            "constant_value": "aws:MultiFactorAuthAge"
                          }
                        }
                      ],
                      "effect": { "constant_value": "Allow" },
                      "resources": {
                        "references": [
                          "data.aws_partition.current.partition",
                          "data.aws_partition.current",
                          "local.aws_account_id",
                          "data.aws_partition.current.partition",
                          "data.aws_partition.current",
                          "local.aws_account_id",
                          "data.aws_partition.current.partition",
                          "data.aws_partition.current",
                          "local.aws_account_id"
                        ]
                      },
                      "sid": { "constant_value": "AllowDeactivateMFADevice" }
                    }
                  ]
                },
                "schema_version": 0
              },
              {
                "address": "data.aws_partition.current",
                "mode": "data",
                "type": "aws_partition",
                "name": "current",
                "provider_config_key": "group_policy_ec2_all_role:aws",
                "schema_version": 0
              }
            ],
            "variables": {
              "attach_iam_self_management_policy": {
                "default": true,
                "description": "Whether to attach IAM policy which allows IAM users to manage their credentials and MFA"
              },
              "aws_account_id": {
                "default": "",
                "description": "AWS account id to use inside IAM policies. If empty, current AWS account ID will be used."
              },
              "create_group": {
                "default": true,
                "description": "Whether to create IAM group"
              },
              "custom_group_policies": {
                "default": [],
                "description": "List of maps of inline IAM policies to attach to IAM group. Should have `name` and `policy` keys in each element."
              },
              "custom_group_policy_arns": {
                "default": [],
                "description": "List of IAM policies ARNs to attach to IAM group"
              },
              "group_users": {
                "default": [],
                "description": "List of IAM users to have in an IAM group which can assume the role"
              },
              "iam_self_management_policy_name_prefix": {
                "default": "IAMSelfManagement-",
                "description": "Name prefix for IAM policy to create with IAM self-management permissions"
              },
              "name": { "default": "", "description": "Name of IAM group" }
            }
          },
          "version_constraint": "~\u003e 3.0"
        },
        "policy_ec2_all_role": {
          "source": "terraform-aws-modules/iam/aws//modules/iam-policy",
          "expressions": {
            "description": {
              "constant_value": "Allow user to get all access to EC2 resource"
            },
            "name": { "constant_value": "policy-ec2-all-role" },
            "path": { "constant_value": "/" },
            "policy": {
              "constant_value": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:*\"\n            ],\n            \"Resource\": \"arn:aws:ec2:*\"\n        }\n    ]\n}\n"
            }
          },
          "module": {
            "outputs": {
              "arn": {
                "expression": {
                  "references": [
                    "aws_iam_policy.policy.arn",
                    "aws_iam_policy.policy"
                  ]
                },
                "description": "The ARN assigned by AWS to this policy"
              },
              "description": {
                "expression": {
                  "references": [
                    "aws_iam_policy.policy.description",
                    "aws_iam_policy.policy"
                  ]
                },
                "description": "The description of the policy"
              },
              "id": {
                "expression": {
                  "references": [
                    "aws_iam_policy.policy.id",
                    "aws_iam_policy.policy"
                  ]
                },
                "description": "The policy's ID"
              },
              "name": {
                "expression": {
                  "references": [
                    "aws_iam_policy.policy.name",
                    "aws_iam_policy.policy"
                  ]
                },
                "description": "The name of the policy"
              },
              "path": {
                "expression": {
                  "references": [
                    "aws_iam_policy.policy.path",
                    "aws_iam_policy.policy"
                  ]
                },
                "description": "The path of the policy in IAM"
              },
              "policy": {
                "expression": {
                  "references": [
                    "aws_iam_policy.policy.policy",
                    "aws_iam_policy.policy"
                  ]
                },
                "description": "The policy document"
              }
            },
            "resources": [
              {
                "address": "aws_iam_policy.policy",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "policy",
                "provider_config_key": "policy_ec2_all_role:aws",
                "expressions": {
                  "description": { "references": ["var.description"] },
                  "name": { "references": ["var.name"] },
                  "path": { "references": ["var.path"] },
                  "policy": { "references": ["var.policy"] }
                },
                "schema_version": 0
              }
            ],
            "variables": {
              "description": {
                "default": "IAM Policy",
                "description": "The description of the policy"
              },
              "name": {
                "default": "",
                "description": "The name of the policy"
              },
              "path": {
                "default": "/",
                "description": "The path of the policy in IAM"
              },
              "policy": {
                "default": "",
                "description": "The path of the policy in IAM (tpl file)"
              }
            }
          },
          "version_constraint": "~\u003e 3.0"
        }
      }
    }
  }
}
